Observe: *.CSV format is *very* standard.  If we could overload it a bit...say like this:
*	Escape binary data as follows: \x__; \t, \r, \n, etc; delimiter must have binary escape
*	need to be able to specify primary, unique keys
*	A table with a single-column primary key could be used to define enumerated functions, etc.
*	A table with an all-fields primary key defines an enumerated relation on n variables
*	Might be able to use this for linguistic purposes (somewhat).

E.g.:
Table of chemical elements:
Primary key is self-name atomic symbol
*	Primary English translation
*	Atomic number
*	various properties (these define *phrases*)
**	average atomic weight
**	Critical temperature
**	Critical pressure
**	melting point (depends on pressure)
**	boiling point (depends on pressure)

Table of isotopes
Primary key is atomic symbol/isotope number
*	various properites
**	Atomic weight
**	Natural prevalence
**	Halflife (we have infinity, so stable isotopes have infinite half-life)

Then a linguistic scripting family could work as follows:
*	header indicates which primitives and linguistic constructs are defined
*	Define enumerated noun type "chemical elements" from first *.CSV file; note that colloquial is "elements"
*	bind __SelfName to primary key
*	bind primary English name to column
*	bind primitive ATOMIC_NUMBER() to column
*	bind English neuter noun atomic number to column; arity-1 direct object "of" with type "chemical elements" required
*	bind English neuter noun critical temperature to column; arity-1 direct object "of"
*	bind English neuter noun critical pressure to column; arity-1 direct object "of"
*	might as well use iso code: en, en-us, etc.
*	...
*	Define "chemical isotope" as a 2-vector
*	bind noun atomic weight to column; arity-1 direct object "of" with type "chemical isotope"
*	bind noun natural prevalence to column; arity-1 direct object "of"

In any case, a noun should handle the following (use English manual to get started):
*	article: the/a|an/some/this|these/that|those
*	gender (language-dependent)
*	adjectives, etc. directly modifying the noun

use a noun wrapper class, of course

Closely related: BerkleyDB family of Perl modules

=====

CREATE DATABASE [IF NOT EXISTS] db_name
* creates database with given name
* in practice, creates a subdirectory under the DB root directory
* errors if the database db_name does exist...unless conditional IF NOT EXISTS is specified.

DROP DATABASE [IF EXISTS] db_name
* drops database with given name
* in practice, does a deltree/rm -rf on the subdirectory implementing the DB
* errors if the database db_name doesn't exist...unless conditional IF EXISTS is specified.

Handle commit/rollback as follows:
* BEGIN; : acquire write lock on table.  Make an in-RAM image.  SELECTS will still work.
* Do SQL on in-RAM image
* COMMIT : augment lock to exclusive.  Write to table, then dispose of RAM image, then unlock.
* ROLLBACK: dispose of RAM image, then unlock

Table format:
* Row index: array of ordered of u32b: starting byte, length. read lock count, exclusive-lock, extinction-lock
* Regardless of logical intent, all fixed-length data comes before all variable-length data.
An UPDATE of fixed-length data thus cannot disturb the row index.
* INSERT: 
** write lock/allow read on row index
** initialize row index entry
** write-lock/allow read table
** update table (algorithm either extends, or fills hole in table)
** release write-lock/allow read on table
** update maximum valid row in row-index
** release row-index
* DELETE:
** exclusive lock on row index
** impose extinction lock on records
** release lock on row index
*** extinction lock: extinction locks above the highest read/exclusive locks are immediately
    eliminated from the row index.  extinction locks render records invisible to further 
    SELECT/UPDATE/INSERT queries.
* SELECT:
** exclusive lock on row-index
** read lock on affected rows (enumerates rows to be selected)
** release lock on row index
** as each row is read, release its own read lock
* UPDATE
** exclusive lock on row-index
** exclusive lock on affected rows (enumerates rows to be updated)
** downgrade lock on row-index to write/allow read
** write-lock/allow read table
** update table
** release locks on row-index, table


======

SELECT [STRAIGHT_JOIN]
       [SQL_SMALL_RESULT] [SQL_BIG_RESULT] [SQL_BUFFER_RESULT]
       [SQL_CACHE | SQL_NO_CACHE] [SQL_CALC_FOUND_ROWS] [HIGH_PRIORITY]
       [DISTINCT | DISTINCTROW | ALL]
    select_expression,...
    [INTO {OUTFILE | DUMPFILE} 'file_name' export_options]
    [FROM table_references
      [WHERE where_definition]
      [GROUP BY {unsigned_integer | col_name | formula} [ASC | DESC], ...]
      [HAVING where_definition]
      [ORDER BY {unsigned_integer | col_name | formula} [ASC | DESC] ,...]
      [LIMIT [offset,] rows]
      [PROCEDURE procedure_name]
      [FOR UPDATE | LOCK IN SHARE MODE]]

INSERT [LOW_PRIORITY | DELAYED] [IGNORE]
        [INTO] tbl_name [(col_name,...)]
        VALUES (expression,...),(...),...
or  INSERT [LOW_PRIORITY | DELAYED] [IGNORE]
        [INTO] tbl_name [(col_name,...)]
        SELECT ...
or  INSERT [LOW_PRIORITY | DELAYED] [IGNORE]
        [INTO] tbl_name
        SET col_name=expression, col_name=expression, ...

INSERT [LOW_PRIORITY] [IGNORE] [INTO] tbl_name [(column list)] SELECT ...

UPDATE [LOW_PRIORITY] [IGNORE] tbl_name
    SET col_name1=expr1 [, col_name2=expr2, ...]
    [WHERE where_definition]
    [LIMIT #]

DELETE [LOW_PRIORITY | QUICK] FROM table_name
       [WHERE where_definition]
       [ORDER BY ...]
       [LIMIT rows]

or

DELETE [LOW_PRIORITY | QUICK] table_name[.*] [,table_name[.*] ...]
       FROM table-references
       [WHERE where_definition]

or

DELETE [LOW_PRIORITY | QUICK]
       FROM table_name[.*], [table_name[.*] ...]
       USING table-references
       [WHERE where_definition]

TRUNCATE TABLE table_name

REPLACE [LOW_PRIORITY | DELAYED]
        [INTO] tbl_name [(col_name,...)]
        VALUES (expression,...),(...),...
or  REPLACE [LOW_PRIORITY | DELAYED]
        [INTO] tbl_name [(col_name,...)]
        SELECT ...
or  REPLACE [LOW_PRIORITY | DELAYED]
        [INTO] tbl_name
        SET col_name=expression, col_name=expression,...

CREATE [TEMPORARY] TABLE [IF NOT EXISTS] tbl_name [(create_definition,...)]
[table_options] [select_statement]

create_definition:
  col_name type [NOT NULL | NULL] [DEFAULT default_value] [AUTO_INCREMENT]
            [PRIMARY KEY] [reference_definition]
  or    PRIMARY KEY (index_col_name,...)
  or    KEY [index_name] (index_col_name,...)
  or    INDEX [index_name] (index_col_name,...)
  or    UNIQUE [INDEX] [index_name] (index_col_name,...)
  or    FULLTEXT [INDEX] [index_name] (index_col_name,...)
  or    [CONSTRAINT symbol] FOREIGN KEY [index_name] (index_col_name,...)
            [reference_definition]
  or    CHECK (expr)

type:
        TINYINT[(length)] [UNSIGNED] [ZEROFILL]
  or    SMALLINT[(length)] [UNSIGNED] [ZEROFILL]
  or    MEDIUMINT[(length)] [UNSIGNED] [ZEROFILL]
  or    INT[(length)] [UNSIGNED] [ZEROFILL]
  or    INTEGER[(length)] [UNSIGNED] [ZEROFILL]
  or    BIGINT[(length)] [UNSIGNED] [ZEROFILL]
  or    REAL[(length,decimals)] [UNSIGNED] [ZEROFILL]
  or    DOUBLE[(length,decimals)] [UNSIGNED] [ZEROFILL]
  or    FLOAT[(length,decimals)] [UNSIGNED] [ZEROFILL]
  or    DECIMAL(length,decimals) [UNSIGNED] [ZEROFILL]
  or    NUMERIC(length,decimals) [UNSIGNED] [ZEROFILL]
  or    CHAR(length) [BINARY]
  or    VARCHAR(length) [BINARY]
  or    DATE
  or    TIME
  or    TIMESTAMP
  or    DATETIME
  or    TINYBLOB
  or    BLOB
  or    MEDIUMBLOB
  or    LONGBLOB
  or    TINYTEXT
  or    TEXT
  or    MEDIUMTEXT
  or    LONGTEXT
  or    ENUM(value1,value2,value3,...)
  or    SET(value1,value2,value3,...)

index_col_name:
        col_name [(length)]

reference_definition:
        REFERENCES tbl_name [(index_col_name,...)]
                   [MATCH FULL | MATCH PARTIAL]
                   [ON DELETE reference_option]
                   [ON UPDATE reference_option]

reference_option:
        RESTRICT | CASCADE | SET NULL | NO ACTION | SET DEFAULT

table_options:
	TYPE = {BDB | HEAP | ISAM | InnoDB | MERGE | MRG_MYISAM | MYISAM }
or	AUTO_INCREMENT = #
or	AVG_ROW_LENGTH = #
or	CHECKSUM = {0 | 1}
or	COMMENT = "string"
or	MAX_ROWS = #
or	MIN_ROWS = #
or	PACK_KEYS = {0 | 1 | DEFAULT}
or	PASSWORD = "string"
or	DELAY_KEY_WRITE = {0 | 1}
or      ROW_FORMAT= { default | dynamic | fixed | compressed }
or	RAID_TYPE= {1 | STRIPED | RAID0 } RAID_CHUNKS=#  RAID_CHUNKSIZE=#
or	UNION = (table_name,[table_name...])
or	INSERT_METHOD= {NO | FIRST | LAST }
or      DATA DIRECTORY="absolute path to directory"
or      INDEX DIRECTORY="absolute path to directory"

select_statement:
	[IGNORE | REPLACE] SELECT ...  (Some legal select statement)

ALTER [IGNORE] TABLE tbl_name alter_spec [, alter_spec ...]

alter_specification:
        ADD [COLUMN] create_definition [FIRST | AFTER column_name ]
  or    ADD [COLUMN] (create_definition, create_definition,...)
  or    ADD INDEX [index_name] (index_col_name,...)
  or    ADD PRIMARY KEY (index_col_name,...)
  or    ADD UNIQUE [index_name] (index_col_name,...)
  or    ADD FULLTEXT [index_name] (index_col_name,...)
  or	ADD [CONSTRAINT symbol] FOREIGN KEY index_name (index_col_name,...)
            [reference_definition]
  or    ALTER [COLUMN] col_name {SET DEFAULT literal | DROP DEFAULT}
  or    CHANGE [COLUMN] old_col_name create_definition
               [FIRST | AFTER column_name]
  or    MODIFY [COLUMN] create_definition [FIRST | AFTER column_name]
  or    DROP [COLUMN] col_name
  or    DROP PRIMARY KEY
  or    DROP INDEX index_name
  or    DISABLE KEYS
  or    ENABLE KEYS
  or    RENAME [TO] new_tbl_name
  or    ORDER BY col
  or    table_options

RENAME TABLE tbl_name TO new_tbl_name[, tbl_name2 TO new_tbl_name2,...]

DROP TABLE [IF EXISTS] tbl_name [, tbl_name,...] [RESTRICT | CASCADE]

CREATE [UNIQUE|FULLTEXT] INDEX index_name
       ON tbl_name (col_name[(length)],... )

DROP INDEX index_name ON tbl_name

USE db_name

{DESCRIBE | DESC} tbl_name {col_name | wild}







